module ApiTypes exposing(..)

import Json.Decode
import Json.Encode exposing (Value)
-- The following module comes from bartavelle/json-helpers
import Json.Helpers exposing (..)
import Dict exposing (Dict)
import Set exposing (Set)


type alias PlayerId  = Int

jsonDecPlayerId : Json.Decode.Decoder ( PlayerId )
jsonDecPlayerId =
    Json.Decode.int

jsonEncPlayerId : PlayerId -> Value
jsonEncPlayerId  val = Json.Encode.int val



type alias Location  =
   { x: Int
   , y: Char
   }

jsonDecLocation : Json.Decode.Decoder ( Location )
jsonDecLocation =
   Json.Decode.succeed (\px py -> {x = px, y = py})
   |> required "x" (Json.Decode.int)
   |> required "y" (jsonDecChar)

jsonEncLocation : Location -> Value
jsonEncLocation  val =
   Json.Encode.object
   [ ("x", Json.Encode.int val.x)
   , ("y", jsonEncChar val.y)
   ]



type alias Username  = String

jsonDecUsername : Json.Decode.Decoder ( Username )
jsonDecUsername =
    Json.Decode.string

jsonEncUsername : Username -> Value
jsonEncUsername  val = Json.Encode.string val



type alias PlayerInfo  =
   { username: Username
   , email: String
   , player_id: PlayerId
   }

jsonDecPlayerInfo : Json.Decode.Decoder ( PlayerInfo )
jsonDecPlayerInfo =
   Json.Decode.succeed (\pusername pemail pplayer_id -> {username = pusername, email = pemail, player_id = pplayer_id})
   |> required "username" (jsonDecUsername)
   |> required "email" (Json.Decode.string)
   |> required "player_id" (jsonDecPlayerId)

jsonEncPlayerInfo : PlayerInfo -> Value
jsonEncPlayerInfo  val =
   Json.Encode.object
   [ ("username", jsonEncUsername val.username)
   , ("email", Json.Encode.string val.email)
   , ("player_id", jsonEncPlayerId val.player_id)
   ]



type Empire  =
    Kilwa 
    | Mutapa 
    | Zulu 
    | Lozi 
    | Mapungubwe 

jsonDecEmpire : Json.Decode.Decoder ( Empire )
jsonDecEmpire = 
    let jsonDecDictEmpire = Dict.fromList [("Kilwa", Kilwa), ("Mutapa", Mutapa), ("Zulu", Zulu), ("Lozi", Lozi), ("Mapungubwe", Mapungubwe)]
    in  decodeSumUnaries "Empire" jsonDecDictEmpire

jsonEncEmpire : Empire -> Value
jsonEncEmpire  val =
    case val of
        Kilwa -> Json.Encode.string "Kilwa"
        Mutapa -> Json.Encode.string "Mutapa"
        Zulu -> Json.Encode.string "Zulu"
        Lozi -> Json.Encode.string "Lozi"
        Mapungubwe -> Json.Encode.string "Mapungubwe"



type Resource  =
    Clay 
    | Wood 
    | Ivory 
    | Diamonds 

jsonDecResource : Json.Decode.Decoder ( Resource )
jsonDecResource = 
    let jsonDecDictResource = Dict.fromList [("Clay", Clay), ("Wood", Wood), ("Ivory", Ivory), ("Diamonds", Diamonds)]
    in  decodeSumUnaries "Resource" jsonDecDictResource

jsonEncResource : Resource -> Value
jsonEncResource  val =
    case val of
        Clay -> Json.Encode.string "Clay"
        Wood -> Json.Encode.string "Wood"
        Ivory -> Json.Encode.string "Ivory"
        Diamonds -> Json.Encode.string "Diamonds"



type Land  =
    StartingArea 
    | Resource Resource
    | BlankLand 

jsonDecLand : Json.Decode.Decoder ( Land )
jsonDecLand =
    let jsonDecDictLand = Dict.fromList
            [ ("StartingArea", Json.Decode.lazy (\_ -> Json.Decode.succeed StartingArea))
            , ("Resource", Json.Decode.lazy (\_ -> Json.Decode.map Resource (jsonDecResource)))
            , ("BlankLand", Json.Decode.lazy (\_ -> Json.Decode.succeed BlankLand))
            ]
    in  decodeSumObjectWithSingleField  "Land" jsonDecDictLand

jsonEncLand : Land -> Value
jsonEncLand  val =
    let keyval v = case v of
                    StartingArea  -> ("StartingArea", encodeValue (Json.Encode.list identity []))
                    Resource v1 -> ("Resource", encodeValue (jsonEncResource v1))
                    BlankLand  -> ("BlankLand", encodeValue (Json.Encode.list identity []))
    in encodeSumObjectWithSingleField keyval val



type Square  =
    Water 
    | Land Land

jsonDecSquare : Json.Decode.Decoder ( Square )
jsonDecSquare =
    let jsonDecDictSquare = Dict.fromList
            [ ("Water", Json.Decode.lazy (\_ -> Json.Decode.succeed Water))
            , ("Land", Json.Decode.lazy (\_ -> Json.Decode.map Land (jsonDecLand)))
            ]
    in  decodeSumObjectWithSingleField  "Square" jsonDecDictSquare

jsonEncSquare : Square -> Value
jsonEncSquare  val =
    let keyval v = case v of
                    Water  -> ("Water", encodeValue (Json.Encode.list identity []))
                    Land v1 -> ("Land", encodeValue (jsonEncLand v1))
    in encodeSumObjectWithSingleField keyval val



type alias MapLayout  = (List (Location, Square))

jsonDecMapLayout : Json.Decode.Decoder ( MapLayout )
jsonDecMapLayout =
    Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecLocation)) (Json.Decode.index 1 (jsonDecSquare)))

jsonEncMapLayout : MapLayout -> Value
jsonEncMapLayout  val = (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncLocation) v1,(jsonEncSquare) v2])) val



type Craftsman  =
    Potter 
    | IvoryCarver 
    | WoodCarver 
    | DiamondCutter 
    | VesselMaker 
    | ThroneMaker 
    | Sculptor 

jsonDecCraftsman : Json.Decode.Decoder ( Craftsman )
jsonDecCraftsman = 
    let jsonDecDictCraftsman = Dict.fromList [("Potter", Potter), ("IvoryCarver", IvoryCarver), ("WoodCarver", WoodCarver), ("DiamondCutter", DiamondCutter), ("VesselMaker", VesselMaker), ("ThroneMaker", ThroneMaker), ("Sculptor", Sculptor)]
    in  decodeSumUnaries "Craftsman" jsonDecDictCraftsman

jsonEncCraftsman : Craftsman -> Value
jsonEncCraftsman  val =
    case val of
        Potter -> Json.Encode.string "Potter"
        IvoryCarver -> Json.Encode.string "IvoryCarver"
        WoodCarver -> Json.Encode.string "WoodCarver"
        DiamondCutter -> Json.Encode.string "DiamondCutter"
        VesselMaker -> Json.Encode.string "VesselMaker"
        ThroneMaker -> Json.Encode.string "ThroneMaker"
        Sculptor -> Json.Encode.string "Sculptor"



type PrimaryOrSecondary  =
    Primary 
    | Secondary 

jsonDecPrimaryOrSecondary : Json.Decode.Decoder ( PrimaryOrSecondary )
jsonDecPrimaryOrSecondary = 
    let jsonDecDictPrimaryOrSecondary = Dict.fromList [("Primary", Primary), ("Secondary", Secondary)]
    in  decodeSumUnaries "PrimaryOrSecondary" jsonDecDictPrimaryOrSecondary

jsonEncPrimaryOrSecondary : PrimaryOrSecondary -> Value
jsonEncPrimaryOrSecondary  val =
    case val of
        Primary -> Json.Encode.string "Primary"
        Secondary -> Json.Encode.string "Secondary"



type alias TechnologyCard  =
   { name: String
   , craftsman_type: Craftsman
   , victory_requirement: Int
   , victory_points: Int
   , cost: Int
   }

jsonDecTechnologyCard : Json.Decode.Decoder ( TechnologyCard )
jsonDecTechnologyCard =
   Json.Decode.succeed (\pname pcraftsman_type pvictory_requirement pvictory_points pcost -> {name = pname, craftsman_type = pcraftsman_type, victory_requirement = pvictory_requirement, victory_points = pvictory_points, cost = pcost})
   |> required "name" (Json.Decode.string)
   |> required "craftsman_type" (jsonDecCraftsman)
   |> required "victory_requirement" (Json.Decode.int)
   |> required "victory_points" (Json.Decode.int)
   |> required "cost" (Json.Decode.int)

jsonEncTechnologyCard : TechnologyCard -> Value
jsonEncTechnologyCard  val =
   Json.Encode.object
   [ ("name", Json.Encode.string val.name)
   , ("craftsman_type", jsonEncCraftsman val.craftsman_type)
   , ("victory_requirement", Json.Encode.int val.victory_requirement)
   , ("victory_points", Json.Encode.int val.victory_points)
   , ("cost", Json.Encode.int val.cost)
   ]



type Specialist  =
    Shaman 
    | RainCeremony 
    | Herd 
    | Builder 
    | Nomads 

jsonDecSpecialist : Json.Decode.Decoder ( Specialist )
jsonDecSpecialist = 
    let jsonDecDictSpecialist = Dict.fromList [("Shaman", Shaman), ("RainCeremony", RainCeremony), ("Herd", Herd), ("Builder", Builder), ("Nomads", Nomads)]
    in  decodeSumUnaries "Specialist" jsonDecDictSpecialist

jsonEncSpecialist : Specialist -> Value
jsonEncSpecialist  val =
    case val of
        Shaman -> Json.Encode.string "Shaman"
        RainCeremony -> Json.Encode.string "RainCeremony"
        Herd -> Json.Encode.string "Herd"
        Builder -> Json.Encode.string "Builder"
        Nomads -> Json.Encode.string "Nomads"



type God  =
    Shadipinyi 
    | Elegua 
    | Dziva 
    | Eshu 
    | Gu 
    | Obatala 
    | Atete 
    | TsuiGoab 
    | Anansi 
    | Qamata Int
    | Engai 
    | Xango 

jsonDecGod : Json.Decode.Decoder ( God )
jsonDecGod =
    let jsonDecDictGod = Dict.fromList
            [ ("Shadipinyi", Json.Decode.lazy (\_ -> Json.Decode.succeed Shadipinyi))
            , ("Elegua", Json.Decode.lazy (\_ -> Json.Decode.succeed Elegua))
            , ("Dziva", Json.Decode.lazy (\_ -> Json.Decode.succeed Dziva))
            , ("Eshu", Json.Decode.lazy (\_ -> Json.Decode.succeed Eshu))
            , ("Gu", Json.Decode.lazy (\_ -> Json.Decode.succeed Gu))
            , ("Obatala", Json.Decode.lazy (\_ -> Json.Decode.succeed Obatala))
            , ("Atete", Json.Decode.lazy (\_ -> Json.Decode.succeed Atete))
            , ("TsuiGoab", Json.Decode.lazy (\_ -> Json.Decode.succeed TsuiGoab))
            , ("Anansi", Json.Decode.lazy (\_ -> Json.Decode.succeed Anansi))
            , ("Qamata", Json.Decode.lazy (\_ -> Json.Decode.map Qamata (Json.Decode.int)))
            , ("Engai", Json.Decode.lazy (\_ -> Json.Decode.succeed Engai))
            , ("Xango", Json.Decode.lazy (\_ -> Json.Decode.succeed Xango))
            ]
    in  decodeSumObjectWithSingleField  "God" jsonDecDictGod

jsonEncGod : God -> Value
jsonEncGod  val =
    let keyval v = case v of
                    Shadipinyi  -> ("Shadipinyi", encodeValue (Json.Encode.list identity []))
                    Elegua  -> ("Elegua", encodeValue (Json.Encode.list identity []))
                    Dziva  -> ("Dziva", encodeValue (Json.Encode.list identity []))
                    Eshu  -> ("Eshu", encodeValue (Json.Encode.list identity []))
                    Gu  -> ("Gu", encodeValue (Json.Encode.list identity []))
                    Obatala  -> ("Obatala", encodeValue (Json.Encode.list identity []))
                    Atete  -> ("Atete", encodeValue (Json.Encode.list identity []))
                    TsuiGoab  -> ("TsuiGoab", encodeValue (Json.Encode.list identity []))
                    Anansi  -> ("Anansi", encodeValue (Json.Encode.list identity []))
                    Qamata v1 -> ("Qamata", encodeValue (Json.Encode.int v1))
                    Engai  -> ("Engai", encodeValue (Json.Encode.list identity []))
                    Xango  -> ("Xango", encodeValue (Json.Encode.list identity []))
    in encodeSumObjectWithSingleField keyval val



type alias Player  =
   { info: (Maybe PlayerInfo)
   , victory_requirement: Points
   , victory_points: Points
   , empire: (Maybe Empire)
   , cattle: Int
   , monuments: (List (Location, Int))
   , craftsmen: (List (Location, (Rotated Craftsman)))
   , technology_cards: (List (TechnologyCard, TechnologyCardState))
   , specialists: (List (Specialist, Int))
   , god: (Maybe God)
   , activations: (List Activation)
   }

jsonDecPlayer : Json.Decode.Decoder ( Player )
jsonDecPlayer =
   Json.Decode.succeed (\pinfo pvictory_requirement pvictory_points pempire pcattle pmonuments pcraftsmen ptechnology_cards pspecialists pgod pactivations -> {info = pinfo, victory_requirement = pvictory_requirement, victory_points = pvictory_points, empire = pempire, cattle = pcattle, monuments = pmonuments, craftsmen = pcraftsmen, technology_cards = ptechnology_cards, specialists = pspecialists, god = pgod, activations = pactivations})
   |> fnullable "info" (jsonDecPlayerInfo)
   |> required "victory_requirement" (jsonDecPoints)
   |> required "victory_points" (jsonDecPoints)
   |> fnullable "empire" (jsonDecEmpire)
   |> required "cattle" (Json.Decode.int)
   |> required "monuments" (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecLocation)) (Json.Decode.index 1 (Json.Decode.int))))
   |> required "craftsmen" (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecLocation)) (Json.Decode.index 1 (jsonDecRotated (jsonDecCraftsman)))))
   |> required "technology_cards" (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecTechnologyCard)) (Json.Decode.index 1 (jsonDecTechnologyCardState))))
   |> required "specialists" (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecSpecialist)) (Json.Decode.index 1 (Json.Decode.int))))
   |> fnullable "god" (jsonDecGod)
   |> required "activations" (Json.Decode.list (jsonDecActivation))

jsonEncPlayer : Player -> Value
jsonEncPlayer  val =
   Json.Encode.object
   [ ("info", (maybeEncode (jsonEncPlayerInfo)) val.info)
   , ("victory_requirement", jsonEncPoints val.victory_requirement)
   , ("victory_points", jsonEncPoints val.victory_points)
   , ("empire", (maybeEncode (jsonEncEmpire)) val.empire)
   , ("cattle", Json.Encode.int val.cattle)
   , ("monuments", (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncLocation) v1,(Json.Encode.int) v2])) val.monuments)
   , ("craftsmen", (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncLocation) v1,((jsonEncRotated (jsonEncCraftsman))) v2])) val.craftsmen)
   , ("technology_cards", (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncTechnologyCard) v1,(jsonEncTechnologyCardState) v2])) val.technology_cards)
   , ("specialists", (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncSpecialist) v1,(Json.Encode.int) v2])) val.specialists)
   , ("god", (maybeEncode (jsonEncGod)) val.god)
   , ("activations", (Json.Encode.list jsonEncActivation) val.activations)
   ]



type UsedMarker  =
    NotUsed 
    | Used 
    | UsedTwice 

jsonDecUsedMarker : Json.Decode.Decoder ( UsedMarker )
jsonDecUsedMarker = 
    let jsonDecDictUsedMarker = Dict.fromList [("NotUsed", NotUsed), ("Used", Used), ("UsedTwice", UsedTwice)]
    in  decodeSumUnaries "UsedMarker" jsonDecDictUsedMarker

jsonEncUsedMarker : UsedMarker -> Value
jsonEncUsedMarker  val =
    case val of
        NotUsed -> Json.Encode.string "NotUsed"
        Used -> Json.Encode.string "Used"
        UsedTwice -> Json.Encode.string "UsedTwice"



type alias GenerosityOfKingsState  =
   { plaques: (List EmpirePlaque)
   , cattle_pool: Int
   , last_bid: (Maybe Int)
   , players_passed: (List PlayerId)
   }

jsonDecGenerosityOfKingsState : Json.Decode.Decoder ( GenerosityOfKingsState )
jsonDecGenerosityOfKingsState =
   Json.Decode.succeed (\pplaques pcattle_pool plast_bid pplayers_passed -> {plaques = pplaques, cattle_pool = pcattle_pool, last_bid = plast_bid, players_passed = pplayers_passed})
   |> required "plaques" (Json.Decode.list (jsonDecEmpirePlaque))
   |> required "cattle_pool" (Json.Decode.int)
   |> fnullable "last_bid" (Json.Decode.int)
   |> required "players_passed" (Json.Decode.list (jsonDecPlayerId))

jsonEncGenerosityOfKingsState : GenerosityOfKingsState -> Value
jsonEncGenerosityOfKingsState  val =
   Json.Encode.object
   [ ("plaques", (Json.Encode.list jsonEncEmpirePlaque) val.plaques)
   , ("cattle_pool", Json.Encode.int val.cattle_pool)
   , ("last_bid", (maybeEncode (Json.Encode.int)) val.last_bid)
   , ("players_passed", (Json.Encode.list jsonEncPlayerId) val.players_passed)
   ]



type Phase  =
    PreSetup 
    | Setup 
    | GenerosityOfKings 
    | ReligionAndCulture 
    | Revenues 
    | LetUsCompareMythologies 

jsonDecPhase : Json.Decode.Decoder ( Phase )
jsonDecPhase = 
    let jsonDecDictPhase = Dict.fromList [("PreSetup", PreSetup), ("Setup", Setup), ("GenerosityOfKings", GenerosityOfKings), ("ReligionAndCulture", ReligionAndCulture), ("Revenues", Revenues), ("LetUsCompareMythologies", LetUsCompareMythologies)]
    in  decodeSumUnaries "Phase" jsonDecDictPhase

jsonEncPhase : Phase -> Value
jsonEncPhase  val =
    case val of
        PreSetup -> Json.Encode.string "PreSetup"
        Setup -> Json.Encode.string "Setup"
        GenerosityOfKings -> Json.Encode.string "GenerosityOfKings"
        ReligionAndCulture -> Json.Encode.string "ReligionAndCulture"
        Revenues -> Json.Encode.string "Revenues"
        LetUsCompareMythologies -> Json.Encode.string "LetUsCompareMythologies"



type alias Round  =
   { players: (List PlayerId)
   , current_player: (Maybe PlayerId)
   , used_markers: (List (Location, Int))
   , generosity_of_kings_state: GenerosityOfKingsState
   , current_phase: (Maybe Phase)
   }

jsonDecRound : Json.Decode.Decoder ( Round )
jsonDecRound =
   Json.Decode.succeed (\pplayers pcurrent_player pused_markers pgenerosity_of_kings_state pcurrent_phase -> {players = pplayers, current_player = pcurrent_player, used_markers = pused_markers, generosity_of_kings_state = pgenerosity_of_kings_state, current_phase = pcurrent_phase})
   |> required "players" (Json.Decode.list (jsonDecPlayerId))
   |> fnullable "current_player" (jsonDecPlayerId)
   |> required "used_markers" (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecLocation)) (Json.Decode.index 1 (Json.Decode.int))))
   |> required "generosity_of_kings_state" (jsonDecGenerosityOfKingsState)
   |> fnullable "current_phase" (jsonDecPhase)

jsonEncRound : Round -> Value
jsonEncRound  val =
   Json.Encode.object
   [ ("players", (Json.Encode.list jsonEncPlayerId) val.players)
   , ("current_player", (maybeEncode (jsonEncPlayerId)) val.current_player)
   , ("used_markers", (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncLocation) v1,(Json.Encode.int) v2])) val.used_markers)
   , ("generosity_of_kings_state", jsonEncGenerosityOfKingsState val.generosity_of_kings_state)
   , ("current_phase", (maybeEncode (jsonEncPhase)) val.current_phase)
   ]



type alias Game  =
   { players: (List (PlayerId, Player))
   , round: Round
   , map_layout: MapLayout
   , technology_cards: (List (Craftsman, (List TechnologyCard)))
   , gods: (List God)
   , specialists: (List Specialist)
   , winner: (Maybe PlayerId)
   , step: Int
   , resource_tiles: (List (Resource, Int))
   , water_tiles: Int
   , craftsman_tiles: (List (Craftsman, Int))
   }

jsonDecGame : Json.Decode.Decoder ( Game )
jsonDecGame =
   Json.Decode.succeed (\pplayers pround pmap_layout ptechnology_cards pgods pspecialists pwinner pstep presource_tiles pwater_tiles pcraftsman_tiles -> {players = pplayers, round = pround, map_layout = pmap_layout, technology_cards = ptechnology_cards, gods = pgods, specialists = pspecialists, winner = pwinner, step = pstep, resource_tiles = presource_tiles, water_tiles = pwater_tiles, craftsman_tiles = pcraftsman_tiles})
   |> required "players" (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecPlayerId)) (Json.Decode.index 1 (jsonDecPlayer))))
   |> required "round" (jsonDecRound)
   |> required "map_layout" (jsonDecMapLayout)
   |> required "technology_cards" (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecCraftsman)) (Json.Decode.index 1 (Json.Decode.list (jsonDecTechnologyCard)))))
   |> required "gods" (Json.Decode.list (jsonDecGod))
   |> required "specialists" (Json.Decode.list (jsonDecSpecialist))
   |> fnullable "winner" (jsonDecPlayerId)
   |> required "step" (Json.Decode.int)
   |> required "resource_tiles" (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecResource)) (Json.Decode.index 1 (Json.Decode.int))))
   |> required "water_tiles" (Json.Decode.int)
   |> required "craftsman_tiles" (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecCraftsman)) (Json.Decode.index 1 (Json.Decode.int))))

jsonEncGame : Game -> Value
jsonEncGame  val =
   Json.Encode.object
   [ ("players", (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncPlayerId) v1,(jsonEncPlayer) v2])) val.players)
   , ("round", jsonEncRound val.round)
   , ("map_layout", jsonEncMapLayout val.map_layout)
   , ("technology_cards", (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncCraftsman) v1,((Json.Encode.list jsonEncTechnologyCard)) v2])) val.technology_cards)
   , ("gods", (Json.Encode.list jsonEncGod) val.gods)
   , ("specialists", (Json.Encode.list jsonEncSpecialist) val.specialists)
   , ("winner", (maybeEncode (jsonEncPlayerId)) val.winner)
   , ("step", Json.Encode.int val.step)
   , ("resource_tiles", (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncResource) v1,(Json.Encode.int) v2])) val.resource_tiles)
   , ("water_tiles", Json.Encode.int val.water_tiles)
   , ("craftsman_tiles", (Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncCraftsman) v1,(Json.Encode.int) v2])) val.craftsman_tiles)
   ]



type GameCommand  =
    ChooseEmpire Empire
    | PlaceStartingMonument Location
    | Bid Int
    | Pass 
    | ReligionAndCultureCommand ReligionAndCultureMultiCommand

jsonDecGameCommand : Json.Decode.Decoder ( GameCommand )
jsonDecGameCommand =
    let jsonDecDictGameCommand = Dict.fromList
            [ ("ChooseEmpire", Json.Decode.lazy (\_ -> Json.Decode.map ChooseEmpire (jsonDecEmpire)))
            , ("PlaceStartingMonument", Json.Decode.lazy (\_ -> Json.Decode.map PlaceStartingMonument (jsonDecLocation)))
            , ("Bid", Json.Decode.lazy (\_ -> Json.Decode.map Bid (Json.Decode.int)))
            , ("Pass", Json.Decode.lazy (\_ -> Json.Decode.succeed Pass))
            , ("ReligionAndCultureCommand", Json.Decode.lazy (\_ -> Json.Decode.map ReligionAndCultureCommand (jsonDecReligionAndCultureMultiCommand)))
            ]
    in  decodeSumObjectWithSingleField  "GameCommand" jsonDecDictGameCommand

jsonEncGameCommand : GameCommand -> Value
jsonEncGameCommand  val =
    let keyval v = case v of
                    ChooseEmpire v1 -> ("ChooseEmpire", encodeValue (jsonEncEmpire v1))
                    PlaceStartingMonument v1 -> ("PlaceStartingMonument", encodeValue (jsonEncLocation v1))
                    Bid v1 -> ("Bid", encodeValue (Json.Encode.int v1))
                    Pass  -> ("Pass", encodeValue (Json.Encode.list identity []))
                    ReligionAndCultureCommand v1 -> ("ReligionAndCultureCommand", encodeValue (jsonEncReligionAndCultureMultiCommand v1))
    in encodeSumObjectWithSingleField keyval val



type GameError  =
    InvalidAction String
    | InternalError String

jsonDecGameError : Json.Decode.Decoder ( GameError )
jsonDecGameError =
    let jsonDecDictGameError = Dict.fromList
            [ ("InvalidAction", Json.Decode.lazy (\_ -> Json.Decode.map InvalidAction (Json.Decode.string)))
            , ("InternalError", Json.Decode.lazy (\_ -> Json.Decode.map InternalError (Json.Decode.string)))
            ]
    in  decodeSumObjectWithSingleField  "GameError" jsonDecDictGameError

jsonEncGameError : GameError -> Value
jsonEncGameError  val =
    let keyval v = case v of
                    InvalidAction v1 -> ("InvalidAction", encodeValue (Json.Encode.string v1))
                    InternalError v1 -> ("InternalError", encodeValue (Json.Encode.string v1))
    in encodeSumObjectWithSingleField keyval val



type alias Points  =
   { points: Int
   , step: Int
   }

jsonDecPoints : Json.Decode.Decoder ( Points )
jsonDecPoints =
   Json.Decode.succeed (\ppoints pstep -> {points = ppoints, step = pstep})
   |> required "points" (Json.Decode.int)
   |> required "step" (Json.Decode.int)

jsonEncPoints : Points -> Value
jsonEncPoints  val =
   Json.Encode.object
   [ ("points", Json.Encode.int val.points)
   , ("step", Json.Encode.int val.step)
   ]



type EmpirePlaque  =
    PlayerPlaque Empire
    | ShadipinyiPlaque 

jsonDecEmpirePlaque : Json.Decode.Decoder ( EmpirePlaque )
jsonDecEmpirePlaque =
    let jsonDecDictEmpirePlaque = Dict.fromList
            [ ("PlayerPlaque", Json.Decode.lazy (\_ -> Json.Decode.map PlayerPlaque (jsonDecEmpire)))
            , ("ShadipinyiPlaque", Json.Decode.lazy (\_ -> Json.Decode.succeed ShadipinyiPlaque))
            ]
    in  decodeSumObjectWithSingleField  "EmpirePlaque" jsonDecDictEmpirePlaque

jsonEncEmpirePlaque : EmpirePlaque -> Value
jsonEncEmpirePlaque  val =
    let keyval v = case v of
                    PlayerPlaque v1 -> ("PlayerPlaque", encodeValue (jsonEncEmpire v1))
                    ShadipinyiPlaque  -> ("ShadipinyiPlaque", encodeValue (Json.Encode.list identity []))
    in encodeSumObjectWithSingleField keyval val



type ReligionAndCultureCommand1  =
    ChooseGod God
    | ChooseSpecialist Specialist

jsonDecReligionAndCultureCommand1 : Json.Decode.Decoder ( ReligionAndCultureCommand1 )
jsonDecReligionAndCultureCommand1 =
    let jsonDecDictReligionAndCultureCommand1 = Dict.fromList
            [ ("ChooseGod", Json.Decode.lazy (\_ -> Json.Decode.map ChooseGod (jsonDecGod)))
            , ("ChooseSpecialist", Json.Decode.lazy (\_ -> Json.Decode.map ChooseSpecialist (jsonDecSpecialist)))
            ]
    in  decodeSumObjectWithSingleField  "ReligionAndCultureCommand1" jsonDecDictReligionAndCultureCommand1

jsonEncReligionAndCultureCommand1 : ReligionAndCultureCommand1 -> Value
jsonEncReligionAndCultureCommand1  val =
    let keyval v = case v of
                    ChooseGod v1 -> ("ChooseGod", encodeValue (jsonEncGod v1))
                    ChooseSpecialist v1 -> ("ChooseSpecialist", encodeValue (jsonEncSpecialist v1))
    in encodeSumObjectWithSingleField keyval val



type UseSpecialist  =
    UseShaman Resource Location
    | UseRainCeremony Location Location
    | UseHerd Int
    | UseBuilder 
    | UseNomads 

jsonDecUseSpecialist : Json.Decode.Decoder ( UseSpecialist )
jsonDecUseSpecialist =
    let jsonDecDictUseSpecialist = Dict.fromList
            [ ("UseShaman", Json.Decode.lazy (\_ -> Json.Decode.map2 UseShaman (Json.Decode.index 0 (jsonDecResource)) (Json.Decode.index 1 (jsonDecLocation))))
            , ("UseRainCeremony", Json.Decode.lazy (\_ -> Json.Decode.map2 UseRainCeremony (Json.Decode.index 0 (jsonDecLocation)) (Json.Decode.index 1 (jsonDecLocation))))
            , ("UseHerd", Json.Decode.lazy (\_ -> Json.Decode.map UseHerd (Json.Decode.int)))
            , ("UseBuilder", Json.Decode.lazy (\_ -> Json.Decode.succeed UseBuilder))
            , ("UseNomads", Json.Decode.lazy (\_ -> Json.Decode.succeed UseNomads))
            ]
    in  decodeSumObjectWithSingleField  "UseSpecialist" jsonDecDictUseSpecialist

jsonEncUseSpecialist : UseSpecialist -> Value
jsonEncUseSpecialist  val =
    let keyval v = case v of
                    UseShaman v1 v2 -> ("UseShaman", encodeValue (Json.Encode.list identity [jsonEncResource v1, jsonEncLocation v2]))
                    UseRainCeremony v1 v2 -> ("UseRainCeremony", encodeValue (Json.Encode.list identity [jsonEncLocation v1, jsonEncLocation v2]))
                    UseHerd v1 -> ("UseHerd", encodeValue (Json.Encode.int v1))
                    UseBuilder  -> ("UseBuilder", encodeValue (Json.Encode.list identity []))
                    UseNomads  -> ("UseNomads", encodeValue (Json.Encode.list identity []))
    in encodeSumObjectWithSingleField keyval val



type ReligionAndCultureCommand3  =
    BuildMonuments (NonEmpty Location)
    | PlaceCraftsmen (List (Location, (Rotated Craftsman))) (List SetPrice)
    | RaiseMonuments (List (Location, (List RaiseMonumentCommand)))

jsonDecReligionAndCultureCommand3 : Json.Decode.Decoder ( ReligionAndCultureCommand3 )
jsonDecReligionAndCultureCommand3 =
    let jsonDecDictReligionAndCultureCommand3 = Dict.fromList
            [ ("BuildMonuments", Json.Decode.lazy (\_ -> Json.Decode.map BuildMonuments (jsonDecNonEmpty (jsonDecLocation))))
            , ("PlaceCraftsmen", Json.Decode.lazy (\_ -> Json.Decode.map2 PlaceCraftsmen (Json.Decode.index 0 (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecLocation)) (Json.Decode.index 1 (jsonDecRotated (jsonDecCraftsman)))))) (Json.Decode.index 1 (Json.Decode.list (jsonDecSetPrice)))))
            , ("RaiseMonuments", Json.Decode.lazy (\_ -> Json.Decode.map RaiseMonuments (Json.Decode.list (Json.Decode.map2 tuple2 (Json.Decode.index 0 (jsonDecLocation)) (Json.Decode.index 1 (Json.Decode.list (jsonDecRaiseMonumentCommand)))))))
            ]
    in  decodeSumObjectWithSingleField  "ReligionAndCultureCommand3" jsonDecDictReligionAndCultureCommand3

jsonEncReligionAndCultureCommand3 : ReligionAndCultureCommand3 -> Value
jsonEncReligionAndCultureCommand3  val =
    let keyval v = case v of
                    BuildMonuments v1 -> ("BuildMonuments", encodeValue ((jsonEncNonEmpty (jsonEncLocation)) v1))
                    PlaceCraftsmen v1 v2 -> ("PlaceCraftsmen", encodeValue (Json.Encode.list identity [(Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncLocation) v1,((jsonEncRotated (jsonEncCraftsman))) v2])) v1, (Json.Encode.list jsonEncSetPrice) v2]))
                    RaiseMonuments v1 -> ("RaiseMonuments", encodeValue ((Json.Encode.list (\(v1,v2) -> Json.Encode.list identity [(jsonEncLocation) v1,((Json.Encode.list jsonEncRaiseMonumentCommand)) v2])) v1))
    in encodeSumObjectWithSingleField keyval val



type RaiseMonumentCommand  =
    UseHub Location
    | UseCraftsman Location Location

jsonDecRaiseMonumentCommand : Json.Decode.Decoder ( RaiseMonumentCommand )
jsonDecRaiseMonumentCommand =
    let jsonDecDictRaiseMonumentCommand = Dict.fromList
            [ ("UseHub", Json.Decode.lazy (\_ -> Json.Decode.map UseHub (jsonDecLocation)))
            , ("UseCraftsman", Json.Decode.lazy (\_ -> Json.Decode.map2 UseCraftsman (Json.Decode.index 0 (jsonDecLocation)) (Json.Decode.index 1 (jsonDecLocation))))
            ]
    in  decodeSumObjectWithSingleField  "RaiseMonumentCommand" jsonDecDictRaiseMonumentCommand

jsonEncRaiseMonumentCommand : RaiseMonumentCommand -> Value
jsonEncRaiseMonumentCommand  val =
    let keyval v = case v of
                    UseHub v1 -> ("UseHub", encodeValue (jsonEncLocation v1))
                    UseCraftsman v1 v2 -> ("UseCraftsman", encodeValue (Json.Encode.list identity [jsonEncLocation v1, jsonEncLocation v2]))
    in encodeSumObjectWithSingleField keyval val



type alias ReligionAndCultureMultiCommand  =
   { dziva: (Maybe (List SetPrice))
   , action1: (Maybe ReligionAndCultureCommand1)
   , action2: (Maybe UseSpecialist)
   , action3: (Maybe ReligionAndCultureCommand3)
   , end: Bool
   }

jsonDecReligionAndCultureMultiCommand : Json.Decode.Decoder ( ReligionAndCultureMultiCommand )
jsonDecReligionAndCultureMultiCommand =
   Json.Decode.succeed (\pdziva paction1 paction2 paction3 pend -> {dziva = pdziva, action1 = paction1, action2 = paction2, action3 = paction3, end = pend})
   |> fnullable "dziva" (Json.Decode.list (jsonDecSetPrice))
   |> fnullable "action1" (jsonDecReligionAndCultureCommand1)
   |> fnullable "action2" (jsonDecUseSpecialist)
   |> fnullable "action3" (jsonDecReligionAndCultureCommand3)
   |> required "end" (Json.Decode.bool)

jsonEncReligionAndCultureMultiCommand : ReligionAndCultureMultiCommand -> Value
jsonEncReligionAndCultureMultiCommand  val =
   Json.Encode.object
   [ ("dziva", (maybeEncode ((Json.Encode.list jsonEncSetPrice))) val.dziva)
   , ("action1", (maybeEncode (jsonEncReligionAndCultureCommand1)) val.action1)
   , ("action2", (maybeEncode (jsonEncUseSpecialist)) val.action2)
   , ("action3", (maybeEncode (jsonEncReligionAndCultureCommand3)) val.action3)
   , ("end", Json.Encode.bool val.end)
   ]



type alias SetPrice  =
   { price: Int
   , craftsman: Craftsman
   }

jsonDecSetPrice : Json.Decode.Decoder ( SetPrice )
jsonDecSetPrice =
   Json.Decode.succeed (\pprice pcraftsman -> {price = pprice, craftsman = pcraftsman})
   |> required "price" (Json.Decode.int)
   |> required "craftsman" (jsonDecCraftsman)

jsonEncSetPrice : SetPrice -> Value
jsonEncSetPrice  val =
   Json.Encode.object
   [ ("price", Json.Encode.int val.price)
   , ("craftsman", jsonEncCraftsman val.craftsman)
   ]



type alias GameView  =
   { id: Int
   , name: String
   , state: Game
   }

jsonDecGameView : Json.Decode.Decoder ( GameView )
jsonDecGameView =
   Json.Decode.succeed (\pid pname pstate -> {id = pid, name = pname, state = pstate})
   |> required "id" (Json.Decode.int)
   |> required "name" (Json.Decode.string)
   |> required "state" (jsonDecGame)

jsonEncGameView : GameView -> Value
jsonEncGameView  val =
   Json.Encode.object
   [ ("id", Json.Encode.int val.id)
   , ("name", Json.Encode.string val.name)
   , ("state", jsonEncGame val.state)
   ]



type alias UserView  =
   { id: Int
   , username: String
   , email: String
   }

jsonDecUserView : Json.Decode.Decoder ( UserView )
jsonDecUserView =
   Json.Decode.succeed (\pid pusername pemail -> {id = pid, username = pusername, email = pemail})
   |> required "id" (Json.Decode.int)
   |> required "username" (Json.Decode.string)
   |> required "email" (Json.Decode.string)

jsonEncUserView : UserView -> Value
jsonEncUserView  val =
   Json.Encode.object
   [ ("id", Json.Encode.int val.id)
   , ("username", Json.Encode.string val.username)
   , ("email", Json.Encode.string val.email)
   ]

